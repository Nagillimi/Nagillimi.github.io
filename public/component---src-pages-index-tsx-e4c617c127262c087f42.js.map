{"version":3,"file":"component---src-pages-index-tsx-e4c617c127262c087f42.js","mappings":"2OA0EA,MA1CA,SAAuBA,GACrB,IAAIC,EAAWD,EAAMC,SACjBC,EAAaF,EAAMG,MACnBC,GAAa,EAAAC,EAAA,KAQbF,EAAQ,WAAc,WACxB,IAAIG,EAAwB,OAAfF,EAAsBF,EAlCvC,SAA8BE,EAAYF,GACxC,MAA0B,mBAAfA,EACSA,EAAWE,IAWxB,OAAS,GAAIA,EAAYF,GAqBkBK,CAAqBH,EAAYF,GAMjF,OAJc,MAAVI,IACFA,EAAOE,EAAA,GAAyB,OAAfJ,GAGZE,IACN,CAACJ,EAAYE,IAChB,OAAoB,SAAKK,EAAA,WAAuB,CAC9CC,MAAOP,EACPF,SAAUA,K,oBCzCRE,GAAQQ,EAAAA,EAAAA,GAAY,CACtBC,QAAS,CACLC,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,cAMH,SAASE,IACpB,OACI,4BACI,gBAAC,EAAD,CAAeb,MAAOA,GAClB,gBAAC,IAAD,MACA,gBAAC,IAAD","sources":["webpack://my-gatsby-site/./node_modules/@mui/private-theming/ThemeProvider/ThemeProvider.js","webpack://my-gatsby-site/./src/pages/index.tsx"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@mui/utils';\nimport ThemeContext from '../useTheme/ThemeContext';\nimport useTheme from '../useTheme';\nimport nested from './nested'; // To support composition of theme.\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    var mergedTheme = localTheme(outerTheme);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mergedTheme) {\n        console.error(['MUI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\\n'));\n      }\n    }\n\n    return mergedTheme;\n  }\n\n  return _extends({}, outerTheme, localTheme);\n}\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\n\n\nfunction ThemeProvider(props) {\n  var children = props.children,\n      localTheme = props.theme;\n  var outerTheme = useTheme();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outerTheme === null && typeof localTheme === 'function') {\n      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n\n  var theme = React.useMemo(function () {\n    var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n\n    if (output != null) {\n      output[nested] = outerTheme !== null;\n    }\n\n    return output;\n  }, [localTheme, outerTheme]);\n  return /*#__PURE__*/_jsx(ThemeContext.Provider, {\n    value: theme,\n    children: children\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;","/**\r\n * Notes:\r\n * - Color codes: https://htmlcolorcodes.com/\r\n */\r\n\r\nimport { createTheme } from \"@mui/material\";\r\nimport { ThemeProvider } from \"@mui/styles\";\r\nimport * as React from \"react\";\r\nimport { ResponsiveAppBar } from \"../components/appBar\";\r\nimport { GlobalStyle } from \"../styles/globalStyle\";\r\n\r\n/** All pictures, require ts-ignore */\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: \"#ffffff\",\r\n        },\r\n        secondary: {\r\n            main: \"#000000\",\r\n        },\r\n    }\r\n})\r\n\r\n// single page app\r\nexport default function IndexPage() {\r\n    return (\r\n        <main>\r\n            <ThemeProvider theme={theme}>\r\n                <ResponsiveAppBar />\r\n                <GlobalStyle />\r\n            </ThemeProvider>\r\n        </main>\r\n    )\r\n}\r\n"],"names":["props","children","localTheme","theme","outerTheme","useTheme","output","mergeOuterLocalTheme","nested","ThemeContext","value","createTheme","palette","primary","main","secondary","IndexPage"],"sourceRoot":""}